/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.tattooservice.api;

import com.tattooservice.model.Artist;
import com.tattooservice.model.Artwork;
import com.tattooservice.model.Booking;
import com.tattooservice.model.BookingRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-08-31T17:12:52.178051100+05:30[Asia/Calcutta]")
@Validated
@Tag(name = "Artists", description = "the Artists API")
public interface ApiApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /api/artists : List all artists
     *
     * @return Successful response (status code 200)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "apiArtistsGet",
        summary = "List all artists",
        tags = { "Artists" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Artist.class)))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/artists",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Artist>> _apiArtistsGet(
        
    ) {
        return apiArtistsGet();
    }

    // Override this method
    default  ResponseEntity<List<Artist>> apiArtistsGet() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"artworks\" : [ { \"imageUrl\" : \"imageUrl\", \"description\" : \"description\", \"artistId\" : \"artistId\", \"id\" : \"id\", \"title\" : \"title\" }, { \"imageUrl\" : \"imageUrl\", \"description\" : \"description\", \"artistId\" : \"artistId\", \"id\" : \"id\", \"title\" : \"title\" } ], \"name\" : \"name\", \"bio\" : \"bio\", \"id\" : \"id\" }, { \"artworks\" : [ { \"imageUrl\" : \"imageUrl\", \"description\" : \"description\", \"artistId\" : \"artistId\", \"id\" : \"id\", \"title\" : \"title\" }, { \"imageUrl\" : \"imageUrl\", \"description\" : \"description\", \"artistId\" : \"artistId\", \"id\" : \"id\", \"title\" : \"title\" } ], \"name\" : \"name\", \"bio\" : \"bio\", \"id\" : \"id\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/artists/{id} : Get artist details
     *
     * @param id Artist ID (required)
     * @return Successful response (status code 200)
     *         or Artist not found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "apiArtistsIdGet",
        summary = "Get artist details",
        tags = { "Artists" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Artist.class))
            }),
            @ApiResponse(responseCode = "404", description = "Artist not found"),
            @ApiResponse(responseCode = "500", description = "Internal Server Error")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/artists/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Artist> _apiArtistsIdGet(
        @Parameter(name = "id", description = "Artist ID", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return apiArtistsIdGet(id);
    }

    // Override this method
    default  ResponseEntity<Artist> apiArtistsIdGet(String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"artworks\" : [ { \"imageUrl\" : \"imageUrl\", \"description\" : \"description\", \"artistId\" : \"artistId\", \"id\" : \"id\", \"title\" : \"title\" }, { \"imageUrl\" : \"imageUrl\", \"description\" : \"description\", \"artistId\" : \"artistId\", \"id\" : \"id\", \"title\" : \"title\" } ], \"name\" : \"name\", \"bio\" : \"bio\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/artworks : List all artworks
     *
     * @return Successful response (status code 200)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "apiArtworksGet",
        summary = "List all artworks",
        tags = { "Artworks" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Artwork.class)))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/artworks",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Artwork>> _apiArtworksGet(
        
    ) {
        return apiArtworksGet();
    }

    // Override this method
    default  ResponseEntity<List<Artwork>> apiArtworksGet() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"imageUrl\" : \"imageUrl\", \"description\" : \"description\", \"artistId\" : \"artistId\", \"id\" : \"id\", \"title\" : \"title\" }, { \"imageUrl\" : \"imageUrl\", \"description\" : \"description\", \"artistId\" : \"artistId\", \"id\" : \"id\", \"title\" : \"title\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/artworks/{id} : Get artwork details
     *
     * @param id Artwork ID (required)
     * @return Successful response (status code 200)
     *         or Artwork not found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "apiArtworksIdGet",
        summary = "Get artwork details",
        tags = { "Artworks" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Artwork.class))
            }),
            @ApiResponse(responseCode = "404", description = "Artwork not found"),
            @ApiResponse(responseCode = "500", description = "Internal Server Error")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/artworks/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Artwork> _apiArtworksIdGet(
        @Parameter(name = "id", description = "Artwork ID", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return apiArtworksIdGet(id);
    }

    // Override this method
    default  ResponseEntity<Artwork> apiArtworksIdGet(String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"imageUrl\" : \"imageUrl\", \"description\" : \"description\", \"artistId\" : \"artistId\", \"id\" : \"id\", \"title\" : \"title\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/bookings : View all booking requests
     *
     * @return Successful response (status code 200)
     *         or Unauthorized (status code 401)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "apiBookingsGet",
        summary = "View all booking requests",
        tags = { "Bookings (Admin)" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Booking.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "500", description = "Internal Server Error")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/bookings",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Booking>> _apiBookingsGet(
        
    ) {
        return apiBookingsGet();
    }

    // Override this method
    default  ResponseEntity<List<Booking>> apiBookingsGet() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"phone\" : \"phone\", \"name\" : \"name\", \"id\" : \"id\", \"message\" : \"message\" }, { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"phone\" : \"phone\", \"name\" : \"name\", \"id\" : \"id\", \"message\" : \"message\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/bookings : Create booking/contact request
     *
     * @param bookingRequest  (required)
     * @return Booking created successfully (status code 201)
     *         or Invalid request body (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "apiBookingsPost",
        summary = "Create booking/contact request",
        tags = { "Bookings" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Booking created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Booking.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request body"),
            @ApiResponse(responseCode = "500", description = "Internal Server Error")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/bookings",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Booking> _apiBookingsPost(
        @Parameter(name = "BookingRequest", description = "", required = true) @Valid @RequestBody BookingRequest bookingRequest
    ) {
        return apiBookingsPost(bookingRequest);
    }

    // Override this method
    default  ResponseEntity<Booking> apiBookingsPost(BookingRequest bookingRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"phone\" : \"phone\", \"name\" : \"name\", \"id\" : \"id\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
